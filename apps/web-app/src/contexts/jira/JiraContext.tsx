"use client";

import type { JiraContextType } from './JiraContext.types';
import { createContext } from 'react';

const defaultJiraContext: JiraContextType = {
  projects: [],
  sprints: [],
  tasks: [],
  loading: false,
  error: null,
  sprintInfo: null,
  uniqueStatuses: [],
  assigneeStats: [],
  assigneeStatsBySprint: {},
  setAssigneeSprintStat: () => {},
  fetchProjects: async () => {},
  fetchSprints: async () => {},
  fetchTasks: async () => {},
  forceUpdate: async () => {},
  clearTasks: () => {},
  clearSprints: () => {},
  getRawTaskById: () => undefined,
  sprintQuality: 0,
  setSprintQuality: () => {},
  historicalReworkRate: 0,
  setHistoricalReworkRate: () => {},
  perfectWorkKpiLimit: 0,
  setPerfectWorkKpiLimit: () => {},
  weightStoryPoints: 0,
  setWeightStoryPoints: () => {},
  weightTasks: 0,
  setWeightTasks: () => {},
  weightComplexity: 0,
  setWeightComplexity: () => {},
  weightRework: 0,
  setWeightRework: () => {},
  weightDelays: 0,
  setWeightDelays: () => {},
  weightsSum: 0,
  weightsAreValid: false,
  reworkKpiUpperLimit: 0,
  setReworkKpiUpperLimit: () => {},
  totalStoryPointsTarget: 0,
  totalTasksTarget: 0,
  sprintAverageComplexityTarget: 0,
  selectedProjectKey: null,
  logMessages: [],
  users: {},
  activeUsers: {},
  toggleUserActivation: () => {},
  userTypes: {},
  setUserType: () => {},
  projectStatuses: [],
  fetchProjectStatuses: async () => {},
  fetchUsers: async () => [],
  kpiCardVisibility: {},
  toggleKpiCardVisibility: () => {},
  projectsCache: [],
  sprintsCache: {},
  tasksCache: {},
  activeStatuses: {},
  toggleStatusActivation: () => {},
  projectUsers: [],
  projectUsersCache: {},
};

const JiraContext = createContext<JiraContextType>(defaultJiraContext);
export { JiraContext };